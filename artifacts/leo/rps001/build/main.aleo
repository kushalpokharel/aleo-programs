import simple_token.aleo;
program rps001.aleo;

record token:
    owner as address.private;
    amount as u64.private;

struct GameInfo:
    deadline as u32;
    turn as boolean;
    is_complete as boolean;

record Game:
    owner as address.private;
    id as u64.private;
    challenger_move as group.private;
    acceptor_move as u8.private;
    player1 as address.private;
    player2 as address.private;
    is_winner as boolean.private;
    each_stake as u64.private;

record Reedem:
    owner as address.private;
    id as u64.private;
    turn as boolean.private;
    amount as u64.private;
    is_complete as boolean.private;


mapping game_turn:
	key as u64.public;
	value as GameInfo.public;


mapping account:
	key as address.public;
	value as u64.public;

closure hash_choice:
    input r0 as u8;
    input r1 as u128;
    hash.bhp256 r1 into r2 as scalar;
    commit.bhp256 r0 r2 into r3 as group;
    output r3 as group;


function challenge:
    input r0 as u64.private;
    input r1 as address.private;
    input r2 as u8.private;
    input r3 as u128.private;
    input r4 as u32.private;
    input r5 as token.record;
    input r6 as u64.private;
    call hash_choice r2 r3 into r7;
    call simple_token.aleo/transfer_private_to_public r5 aleo13d9dg6cffft3pj66tjm24lccrrdfl708p05u3z7s6lwhl0racqxswukjq4 r6 into r8 r9;
    cast r1 r0 r7 0u8 self.signer r1 false r6 into r10 as Game.record;
    cast self.signer r0 false r6 false into r11 as Reedem.record;
    async challenge r9 r0 r4 into r12;
    output r10 as Game.record;
    output r11 as Reedem.record;
    output r12 as rps001.aleo/challenge.future;

finalize challenge:
    input r0 as simple_token.aleo/transfer_private_to_public.future;
    input r1 as u64.public;
    input r2 as u32.public;
    await r0;
    cast 0u32 false false into r3 as GameInfo;
    get.or_use game_turn[r1] r3 into r4;
    assert.eq r4.deadline 0u32;
    add block.height 50u32 into r5;
    lte r5 r2 into r6;
    assert.eq r6 true;
    cast r2 false false into r7 as GameInfo;
    set r7 into game_turn[r1];


function accept:
    input r0 as Game.record;
    input r1 as u8.private;
    input r2 as token.record;
    input r3 as u64.private;
    call simple_token.aleo/transfer_private_to_public r2 aleo13d9dg6cffft3pj66tjm24lccrrdfl708p05u3z7s6lwhl0racqxswukjq4 r3 into r4 r5;
    cast r0.player1 r0.id r0.challenger_move r1 r0.player1 r0.player2 false r3 into r6 as Game.record;
    add r3 r3 into r7;
    cast self.signer r0.id true r7 false into r8 as Reedem.record;
    async accept r5 r0.id into r9;
    output r6 as Game.record;
    output r8 as Reedem.record;
    output r9 as rps001.aleo/accept.future;

finalize accept:
    input r0 as simple_token.aleo/transfer_private_to_public.future;
    input r1 as u64.public;
    await r0;
    cast 0u32 false false into r2 as GameInfo;
    get.or_use game_turn[r1] r2 into r3;
    assert.neq r3.deadline 0u32;
    lt block.height r3.deadline into r4;
    assert.eq r4 true;
    cast r3.deadline true false into r5 as GameInfo;
    set r5 into game_turn[r1];


function claim_reward:
    input r0 as Reedem.record;
    gt r0.amount 0u64 into r1;
    assert.eq r1 true;
    call simple_token.aleo/transfer_public_to_private self.signer r0.amount into r2 r3;
    async claim_reward r3 r0.turn r0.id r0.is_complete into r4;
    output r2 as simple_token.aleo/token.record;
    output r4 as rps001.aleo/claim_reward.future;

finalize claim_reward:
    input r0 as simple_token.aleo/transfer_public_to_private.future;
    input r1 as boolean.public;
    input r2 as u64.public;
    input r3 as boolean.public;
    await r0;
    get game_turn[r2] into r4;
    is.eq r4.is_complete r3 into r5;
    assert.eq r5 true;
    is.eq r4.is_complete false into r6;
    branch.eq r6 false to end_then_0_0;
    is.eq r1 r4.turn into r7;
    assert.eq r7 true;
    position end_then_0_0;
    gt block.height r4.deadline into r8;
    assert.eq r8 true;


function reveal:
    input r0 as Game.record;
    input r1 as u8.private;
    input r2 as u128.private;
    call hash_choice r1 r2 into r3;
    is.eq r0.challenger_move r3 into r4;
    assert.eq r4 true;
    add r0.each_stake r0.each_stake into r5;
    cast r0.player1 r0.id true r5 true into r6 as Reedem.record;
    add r0.each_stake r0.each_stake into r7;
    cast r0.player2 r0.id false r7 true into r8 as Reedem.record;
    cast r0.player1 r0.id true r0.each_stake true into r9 as Reedem.record;
    cast r0.player2 r0.id false r0.each_stake true into r10 as Reedem.record;
    cast r0.player1 r0.id true 0u64 true into r11 as Reedem.record;
    cast r0.player2 r0.id false 0u64 true into r12 as Reedem.record;
    is.eq r1 1u8 into r13;
    is.eq r0.acceptor_move 1u8 into r14;
    is.eq r0.acceptor_move 2u8 into r15;
    is.eq r1 2u8 into r16;
    is.eq r0.acceptor_move 1u8 into r17;
    is.eq r0.acceptor_move 2u8 into r18;
    is.eq r1 3u8 into r19;
    is.eq r0.acceptor_move 1u8 into r20;
    is.eq r0.acceptor_move 2u8 into r21;
    not r13 into r22;
    not r16 into r23;
    and r22 r23 into r24;
    and r24 r19 into r25;
    not r20 into r26;
    and r25 r26 into r27;
    not r21 into r28;
    and r27 r28 into r29;
    ternary r29 r9.owner r9.owner into r30;
    not r13 into r31;
    not r16 into r32;
    and r31 r32 into r33;
    and r33 r19 into r34;
    not r20 into r35;
    and r34 r35 into r36;
    not r21 into r37;
    and r36 r37 into r38;
    ternary r38 r9.id r9.id into r39;
    not r13 into r40;
    not r16 into r41;
    and r40 r41 into r42;
    and r42 r19 into r43;
    not r20 into r44;
    and r43 r44 into r45;
    not r21 into r46;
    and r45 r46 into r47;
    ternary r47 r9.turn r9.turn into r48;
    not r13 into r49;
    not r16 into r50;
    and r49 r50 into r51;
    and r51 r19 into r52;
    not r20 into r53;
    and r52 r53 into r54;
    not r21 into r55;
    and r54 r55 into r56;
    ternary r56 r9.amount r9.amount into r57;
    not r13 into r58;
    not r16 into r59;
    and r58 r59 into r60;
    and r60 r19 into r61;
    not r20 into r62;
    and r61 r62 into r63;
    not r21 into r64;
    and r63 r64 into r65;
    ternary r65 r9.is_complete r9.is_complete into r66;
    cast r30 r39 r48 r57 r66 into r67 as Reedem.record;
    not r13 into r68;
    not r16 into r69;
    and r68 r69 into r70;
    and r70 r19 into r71;
    not r20 into r72;
    and r71 r72 into r73;
    not r21 into r74;
    and r73 r74 into r75;
    ternary r75 r10.owner r10.owner into r76;
    not r13 into r77;
    not r16 into r78;
    and r77 r78 into r79;
    and r79 r19 into r80;
    not r20 into r81;
    and r80 r81 into r82;
    not r21 into r83;
    and r82 r83 into r84;
    ternary r84 r10.id r10.id into r85;
    not r13 into r86;
    not r16 into r87;
    and r86 r87 into r88;
    and r88 r19 into r89;
    not r20 into r90;
    and r89 r90 into r91;
    not r21 into r92;
    and r91 r92 into r93;
    ternary r93 r10.turn r10.turn into r94;
    not r13 into r95;
    not r16 into r96;
    and r95 r96 into r97;
    and r97 r19 into r98;
    not r20 into r99;
    and r98 r99 into r100;
    not r21 into r101;
    and r100 r101 into r102;
    ternary r102 r10.amount r10.amount into r103;
    not r13 into r104;
    not r16 into r105;
    and r104 r105 into r106;
    and r106 r19 into r107;
    not r20 into r108;
    and r107 r108 into r109;
    not r21 into r110;
    and r109 r110 into r111;
    ternary r111 r10.is_complete r10.is_complete into r112;
    cast r76 r85 r94 r103 r112 into r113 as Reedem.record;
    not r13 into r114;
    not r16 into r115;
    and r114 r115 into r116;
    and r116 r19 into r117;
    not r20 into r118;
    and r117 r118 into r119;
    and r119 r21 into r120;
    ternary r120 r6.owner r67.owner into r121;
    not r13 into r122;
    not r16 into r123;
    and r122 r123 into r124;
    and r124 r19 into r125;
    not r20 into r126;
    and r125 r126 into r127;
    and r127 r21 into r128;
    ternary r128 r6.id r67.id into r129;
    not r13 into r130;
    not r16 into r131;
    and r130 r131 into r132;
    and r132 r19 into r133;
    not r20 into r134;
    and r133 r134 into r135;
    and r135 r21 into r136;
    ternary r136 r6.turn r67.turn into r137;
    not r13 into r138;
    not r16 into r139;
    and r138 r139 into r140;
    and r140 r19 into r141;
    not r20 into r142;
    and r141 r142 into r143;
    and r143 r21 into r144;
    ternary r144 r6.amount r67.amount into r145;
    not r13 into r146;
    not r16 into r147;
    and r146 r147 into r148;
    and r148 r19 into r149;
    not r20 into r150;
    and r149 r150 into r151;
    and r151 r21 into r152;
    ternary r152 r6.is_complete r67.is_complete into r153;
    cast r121 r129 r137 r145 r153 into r154 as Reedem.record;
    not r13 into r155;
    not r16 into r156;
    and r155 r156 into r157;
    and r157 r19 into r158;
    not r20 into r159;
    and r158 r159 into r160;
    and r160 r21 into r161;
    ternary r161 r12.owner r113.owner into r162;
    not r13 into r163;
    not r16 into r164;
    and r163 r164 into r165;
    and r165 r19 into r166;
    not r20 into r167;
    and r166 r167 into r168;
    and r168 r21 into r169;
    ternary r169 r12.id r113.id into r170;
    not r13 into r171;
    not r16 into r172;
    and r171 r172 into r173;
    and r173 r19 into r174;
    not r20 into r175;
    and r174 r175 into r176;
    and r176 r21 into r177;
    ternary r177 r12.turn r113.turn into r178;
    not r13 into r179;
    not r16 into r180;
    and r179 r180 into r181;
    and r181 r19 into r182;
    not r20 into r183;
    and r182 r183 into r184;
    and r184 r21 into r185;
    ternary r185 r12.amount r113.amount into r186;
    not r13 into r187;
    not r16 into r188;
    and r187 r188 into r189;
    and r189 r19 into r190;
    not r20 into r191;
    and r190 r191 into r192;
    and r192 r21 into r193;
    ternary r193 r12.is_complete r113.is_complete into r194;
    cast r162 r170 r178 r186 r194 into r195 as Reedem.record;
    not r13 into r196;
    not r16 into r197;
    and r196 r197 into r198;
    and r198 r19 into r199;
    and r199 r20 into r200;
    ternary r200 r11.owner r154.owner into r201;
    not r13 into r202;
    not r16 into r203;
    and r202 r203 into r204;
    and r204 r19 into r205;
    and r205 r20 into r206;
    ternary r206 r11.id r154.id into r207;
    not r13 into r208;
    not r16 into r209;
    and r208 r209 into r210;
    and r210 r19 into r211;
    and r211 r20 into r212;
    ternary r212 r11.turn r154.turn into r213;
    not r13 into r214;
    not r16 into r215;
    and r214 r215 into r216;
    and r216 r19 into r217;
    and r217 r20 into r218;
    ternary r218 r11.amount r154.amount into r219;
    not r13 into r220;
    not r16 into r221;
    and r220 r221 into r222;
    and r222 r19 into r223;
    and r223 r20 into r224;
    ternary r224 r11.is_complete r154.is_complete into r225;
    cast r201 r207 r213 r219 r225 into r226 as Reedem.record;
    not r13 into r227;
    not r16 into r228;
    and r227 r228 into r229;
    and r229 r19 into r230;
    and r230 r20 into r231;
    ternary r231 r8.owner r195.owner into r232;
    not r13 into r233;
    not r16 into r234;
    and r233 r234 into r235;
    and r235 r19 into r236;
    and r236 r20 into r237;
    ternary r237 r8.id r195.id into r238;
    not r13 into r239;
    not r16 into r240;
    and r239 r240 into r241;
    and r241 r19 into r242;
    and r242 r20 into r243;
    ternary r243 r8.turn r195.turn into r244;
    not r13 into r245;
    not r16 into r246;
    and r245 r246 into r247;
    and r247 r19 into r248;
    and r248 r20 into r249;
    ternary r249 r8.amount r195.amount into r250;
    not r13 into r251;
    not r16 into r252;
    and r251 r252 into r253;
    and r253 r19 into r254;
    and r254 r20 into r255;
    ternary r255 r8.is_complete r195.is_complete into r256;
    cast r232 r238 r244 r250 r256 into r257 as Reedem.record;
    not r13 into r258;
    and r258 r16 into r259;
    not r17 into r260;
    and r259 r260 into r261;
    not r18 into r262;
    and r261 r262 into r263;
    ternary r263 r11.owner r226.owner into r264;
    not r13 into r265;
    and r265 r16 into r266;
    not r17 into r267;
    and r266 r267 into r268;
    not r18 into r269;
    and r268 r269 into r270;
    ternary r270 r11.id r226.id into r271;
    not r13 into r272;
    and r272 r16 into r273;
    not r17 into r274;
    and r273 r274 into r275;
    not r18 into r276;
    and r275 r276 into r277;
    ternary r277 r11.turn r226.turn into r278;
    not r13 into r279;
    and r279 r16 into r280;
    not r17 into r281;
    and r280 r281 into r282;
    not r18 into r283;
    and r282 r283 into r284;
    ternary r284 r11.amount r226.amount into r285;
    not r13 into r286;
    and r286 r16 into r287;
    not r17 into r288;
    and r287 r288 into r289;
    not r18 into r290;
    and r289 r290 into r291;
    ternary r291 r11.is_complete r226.is_complete into r292;
    cast r264 r271 r278 r285 r292 into r293 as Reedem.record;
    not r13 into r294;
    and r294 r16 into r295;
    not r17 into r296;
    and r295 r296 into r297;
    not r18 into r298;
    and r297 r298 into r299;
    ternary r299 r8.owner r257.owner into r300;
    not r13 into r301;
    and r301 r16 into r302;
    not r17 into r303;
    and r302 r303 into r304;
    not r18 into r305;
    and r304 r305 into r306;
    ternary r306 r8.id r257.id into r307;
    not r13 into r308;
    and r308 r16 into r309;
    not r17 into r310;
    and r309 r310 into r311;
    not r18 into r312;
    and r311 r312 into r313;
    ternary r313 r8.turn r257.turn into r314;
    not r13 into r315;
    and r315 r16 into r316;
    not r17 into r317;
    and r316 r317 into r318;
    not r18 into r319;
    and r318 r319 into r320;
    ternary r320 r8.amount r257.amount into r321;
    not r13 into r322;
    and r322 r16 into r323;
    not r17 into r324;
    and r323 r324 into r325;
    not r18 into r326;
    and r325 r326 into r327;
    ternary r327 r8.is_complete r257.is_complete into r328;
    cast r300 r307 r314 r321 r328 into r329 as Reedem.record;
    not r13 into r330;
    and r330 r16 into r331;
    not r17 into r332;
    and r331 r332 into r333;
    and r333 r18 into r334;
    ternary r334 r9.owner r293.owner into r335;
    not r13 into r336;
    and r336 r16 into r337;
    not r17 into r338;
    and r337 r338 into r339;
    and r339 r18 into r340;
    ternary r340 r9.id r293.id into r341;
    not r13 into r342;
    and r342 r16 into r343;
    not r17 into r344;
    and r343 r344 into r345;
    and r345 r18 into r346;
    ternary r346 r9.turn r293.turn into r347;
    not r13 into r348;
    and r348 r16 into r349;
    not r17 into r350;
    and r349 r350 into r351;
    and r351 r18 into r352;
    ternary r352 r9.amount r293.amount into r353;
    not r13 into r354;
    and r354 r16 into r355;
    not r17 into r356;
    and r355 r356 into r357;
    and r357 r18 into r358;
    ternary r358 r9.is_complete r293.is_complete into r359;
    cast r335 r341 r347 r353 r359 into r360 as Reedem.record;
    not r13 into r361;
    and r361 r16 into r362;
    not r17 into r363;
    and r362 r363 into r364;
    and r364 r18 into r365;
    ternary r365 r10.owner r329.owner into r366;
    not r13 into r367;
    and r367 r16 into r368;
    not r17 into r369;
    and r368 r369 into r370;
    and r370 r18 into r371;
    ternary r371 r10.id r329.id into r372;
    not r13 into r373;
    and r373 r16 into r374;
    not r17 into r375;
    and r374 r375 into r376;
    and r376 r18 into r377;
    ternary r377 r10.turn r329.turn into r378;
    not r13 into r379;
    and r379 r16 into r380;
    not r17 into r381;
    and r380 r381 into r382;
    and r382 r18 into r383;
    ternary r383 r10.amount r329.amount into r384;
    not r13 into r385;
    and r385 r16 into r386;
    not r17 into r387;
    and r386 r387 into r388;
    and r388 r18 into r389;
    ternary r389 r10.is_complete r329.is_complete into r390;
    cast r366 r372 r378 r384 r390 into r391 as Reedem.record;
    not r13 into r392;
    and r392 r16 into r393;
    and r393 r17 into r394;
    ternary r394 r6.owner r360.owner into r395;
    not r13 into r396;
    and r396 r16 into r397;
    and r397 r17 into r398;
    ternary r398 r6.id r360.id into r399;
    not r13 into r400;
    and r400 r16 into r401;
    and r401 r17 into r402;
    ternary r402 r6.turn r360.turn into r403;
    not r13 into r404;
    and r404 r16 into r405;
    and r405 r17 into r406;
    ternary r406 r6.amount r360.amount into r407;
    not r13 into r408;
    and r408 r16 into r409;
    and r409 r17 into r410;
    ternary r410 r6.is_complete r360.is_complete into r411;
    cast r395 r399 r403 r407 r411 into r412 as Reedem.record;
    not r13 into r413;
    and r413 r16 into r414;
    and r414 r17 into r415;
    ternary r415 r12.owner r391.owner into r416;
    not r13 into r417;
    and r417 r16 into r418;
    and r418 r17 into r419;
    ternary r419 r12.id r391.id into r420;
    not r13 into r421;
    and r421 r16 into r422;
    and r422 r17 into r423;
    ternary r423 r12.turn r391.turn into r424;
    not r13 into r425;
    and r425 r16 into r426;
    and r426 r17 into r427;
    ternary r427 r12.amount r391.amount into r428;
    not r13 into r429;
    and r429 r16 into r430;
    and r430 r17 into r431;
    ternary r431 r12.is_complete r391.is_complete into r432;
    cast r416 r420 r424 r428 r432 into r433 as Reedem.record;
    not r14 into r434;
    and r13 r434 into r435;
    not r15 into r436;
    and r435 r436 into r437;
    ternary r437 r11.owner r412.owner into r438;
    not r14 into r439;
    and r13 r439 into r440;
    not r15 into r441;
    and r440 r441 into r442;
    ternary r442 r11.id r412.id into r443;
    not r14 into r444;
    and r13 r444 into r445;
    not r15 into r446;
    and r445 r446 into r447;
    ternary r447 r11.turn r412.turn into r448;
    not r14 into r449;
    and r13 r449 into r450;
    not r15 into r451;
    and r450 r451 into r452;
    ternary r452 r11.amount r412.amount into r453;
    not r14 into r454;
    and r13 r454 into r455;
    not r15 into r456;
    and r455 r456 into r457;
    ternary r457 r11.is_complete r412.is_complete into r458;
    cast r438 r443 r448 r453 r458 into r459 as Reedem.record;
    not r14 into r460;
    and r13 r460 into r461;
    not r15 into r462;
    and r461 r462 into r463;
    ternary r463 r8.owner r433.owner into r464;
    not r14 into r465;
    and r13 r465 into r466;
    not r15 into r467;
    and r466 r467 into r468;
    ternary r468 r8.id r433.id into r469;
    not r14 into r470;
    and r13 r470 into r471;
    not r15 into r472;
    and r471 r472 into r473;
    ternary r473 r8.turn r433.turn into r474;
    not r14 into r475;
    and r13 r475 into r476;
    not r15 into r477;
    and r476 r477 into r478;
    ternary r478 r8.amount r433.amount into r479;
    not r14 into r480;
    and r13 r480 into r481;
    not r15 into r482;
    and r481 r482 into r483;
    ternary r483 r8.is_complete r433.is_complete into r484;
    cast r464 r469 r474 r479 r484 into r485 as Reedem.record;
    not r14 into r486;
    and r13 r486 into r487;
    and r487 r15 into r488;
    ternary r488 r6.owner r459.owner into r489;
    not r14 into r490;
    and r13 r490 into r491;
    and r491 r15 into r492;
    ternary r492 r6.id r459.id into r493;
    not r14 into r494;
    and r13 r494 into r495;
    and r495 r15 into r496;
    ternary r496 r6.turn r459.turn into r497;
    not r14 into r498;
    and r13 r498 into r499;
    and r499 r15 into r500;
    ternary r500 r6.amount r459.amount into r501;
    not r14 into r502;
    and r13 r502 into r503;
    and r503 r15 into r504;
    ternary r504 r6.is_complete r459.is_complete into r505;
    cast r489 r493 r497 r501 r505 into r506 as Reedem.record;
    not r14 into r507;
    and r13 r507 into r508;
    and r508 r15 into r509;
    ternary r509 r12.owner r485.owner into r510;
    not r14 into r511;
    and r13 r511 into r512;
    and r512 r15 into r513;
    ternary r513 r12.id r485.id into r514;
    not r14 into r515;
    and r13 r515 into r516;
    and r516 r15 into r517;
    ternary r517 r12.turn r485.turn into r518;
    not r14 into r519;
    and r13 r519 into r520;
    and r520 r15 into r521;
    ternary r521 r12.amount r485.amount into r522;
    not r14 into r523;
    and r13 r523 into r524;
    and r524 r15 into r525;
    ternary r525 r12.is_complete r485.is_complete into r526;
    cast r510 r514 r518 r522 r526 into r527 as Reedem.record;
    and r13 r14 into r528;
    ternary r528 r9.owner r506.owner into r529;
    and r13 r14 into r530;
    ternary r530 r9.id r506.id into r531;
    and r13 r14 into r532;
    ternary r532 r9.turn r506.turn into r533;
    and r13 r14 into r534;
    ternary r534 r9.amount r506.amount into r535;
    and r13 r14 into r536;
    ternary r536 r9.is_complete r506.is_complete into r537;
    cast r529 r531 r533 r535 r537 into r538 as Reedem.record;
    and r13 r14 into r539;
    ternary r539 r10.owner r527.owner into r540;
    and r13 r14 into r541;
    ternary r541 r10.id r527.id into r542;
    and r13 r14 into r543;
    ternary r543 r10.turn r527.turn into r544;
    and r13 r14 into r545;
    ternary r545 r10.amount r527.amount into r546;
    and r13 r14 into r547;
    ternary r547 r10.is_complete r527.is_complete into r548;
    cast r540 r542 r544 r546 r548 into r549 as Reedem.record;
    not r13 into r550;
    not r16 into r551;
    and r550 r551 into r552;
    and r552 r19 into r553;
    not r20 into r554;
    and r553 r554 into r555;
    not r21 into r556;
    and r555 r556 into r557;
    ternary r557 r0.id r0.id into r558;
    not r13 into r559;
    not r16 into r560;
    and r559 r560 into r561;
    and r561 r19 into r562;
    not r20 into r563;
    and r562 r563 into r564;
    and r564 r21 into r565;
    ternary r565 r0.id r558 into r566;
    not r13 into r567;
    not r16 into r568;
    and r567 r568 into r569;
    and r569 r19 into r570;
    and r570 r20 into r571;
    ternary r571 r0.id r566 into r572;
    not r13 into r573;
    and r573 r16 into r574;
    not r17 into r575;
    and r574 r575 into r576;
    not r18 into r577;
    and r576 r577 into r578;
    ternary r578 r0.id r572 into r579;
    not r13 into r580;
    and r580 r16 into r581;
    not r17 into r582;
    and r581 r582 into r583;
    and r583 r18 into r584;
    ternary r584 r0.id r579 into r585;
    not r13 into r586;
    and r586 r16 into r587;
    and r587 r17 into r588;
    ternary r588 r0.id r585 into r589;
    not r14 into r590;
    and r13 r590 into r591;
    not r15 into r592;
    and r591 r592 into r593;
    ternary r593 r0.id r589 into r594;
    not r14 into r595;
    and r13 r595 into r596;
    and r596 r15 into r597;
    ternary r597 r0.id r594 into r598;
    and r13 r14 into r599;
    ternary r599 r0.id r598 into r600;
    not r13 into r601;
    not r16 into r602;
    and r601 r602 into r603;
    and r603 r19 into r604;
    not r20 into r605;
    and r604 r605 into r606;
    not r21 into r607;
    and r606 r607 into r608;
    ternary r608 false false into r609;
    not r13 into r610;
    not r16 into r611;
    and r610 r611 into r612;
    and r612 r19 into r613;
    not r20 into r614;
    and r613 r614 into r615;
    and r615 r21 into r616;
    ternary r616 false r609 into r617;
    not r13 into r618;
    not r16 into r619;
    and r618 r619 into r620;
    and r620 r19 into r621;
    and r621 r20 into r622;
    ternary r622 false r617 into r623;
    not r13 into r624;
    and r624 r16 into r625;
    not r17 into r626;
    and r625 r626 into r627;
    not r18 into r628;
    and r627 r628 into r629;
    ternary r629 false r623 into r630;
    not r13 into r631;
    and r631 r16 into r632;
    not r17 into r633;
    and r632 r633 into r634;
    and r634 r18 into r635;
    ternary r635 false r630 into r636;
    not r13 into r637;
    and r637 r16 into r638;
    and r638 r17 into r639;
    ternary r639 false r636 into r640;
    not r14 into r641;
    and r13 r641 into r642;
    not r15 into r643;
    and r642 r643 into r644;
    ternary r644 false r640 into r645;
    not r14 into r646;
    and r13 r646 into r647;
    and r647 r15 into r648;
    ternary r648 false r645 into r649;
    and r13 r14 into r650;
    ternary r650 false r649 into r651;
    async reveal r600 r651 into r652;
    output r538 as Reedem.record;
    output r549 as Reedem.record;
    output r652 as rps001.aleo/reveal.future;

finalize reveal:
    input r0 as u64.public;
    input r1 as boolean.public;
    get game_turn[r0] into r2;
    cast r2.deadline true true into r3 as GameInfo;
    set r3 into game_turn[r0];
    is.eq r1 r3.turn into r4;
    assert.eq r4 true;
